'\n')
} else {
# T* = tree_m
tree_list[[i]] <- tree_m
treedata_list[[i]] <- treedata_list[[i - 1]]
# cancel drawn parameters for unaccepted tree
leaf_params[i, ] <- leaf_params[i - 1, ]
cat('T(m+1) = T(m)',
'\n')
}
tree_m <- tree_list[[i]]
d <- tree_m$depth
cat('------Bayes tree draw action:', draw,
'\n------Iteration', i, '/', m,
'\n\n')
}
#### Prediction ----------------------------
# weighted nodes expectation
vis_nodes <- data.frame(l = sapply(tree_list, function(x) length(x$left_splits)),
r = sapply(tree_list, function(x) length(x$right_splits)))
vis_nodes
get_Enodes <- function(direc) {
w_node <- sum(table(vis_nodes[[direc]])/m*sort(unique(vis_nodes[[direc]])))
idx <- which.min(abs(w_node - unique(vis_nodes[[direc]])))
Enode <- unique(vis_nodes[[direc]])[idx]
return(Enode)
}
Enodes <- c(get_Enodes('l'), get_Enodes('r'))
Enodes
# expected left splits
sub_lsplits_idx <- sapply(tree_list, function(x) length(x$left_splits) == Enodes[1])
sub_lsplits <- sapply(tree_list[c(sub_lsplits_idx)], function(x) x$left_splits)
if (Enodes[1] > 1) {
# ifelse not handling return rowMeans()
Elsplits <- rowMeans(sub_lsplits)
} else {
Elsplits <- split_z
}
# expected right splits
sub_rsplits <- sapply(tree_list, function(x) length(x$right_splits) == Enodes[2])
sub_rsplits <- sapply(tree_list[c(sub_rsplits)], function(x) x$right_splits)
if (Enodes[2] > 1) {
Ersplits <- rowMeans(sub_rsplits)
} else {
Ersplits <- split_z
}
# get associated leaf parameters
z <- round(rowMeans(z_vals))
data$z <- z
get_leafparams <- function(len_sp, direc) {
p_vec <- c()
if (direc == 'right') {
for (i in 1:len_sp) {
if (len_sp == 1) {
p_vec[i] <- data %>%
filter(z > Ersplits[1]) %>%
.$y %>%
mean()
} else if (i == len_sp) {
p_vec[i] <- data %>%
filter(z > Ersplits[1] &
x < Ersplits[i]) %>%
.$y %>%
mean()
} else if (i == 1) {
p_vec[i] <- data %>%
filter(z > Ersplits[1] &
x > Ersplits[i + 1]) %>%
.$y %>%
mean()
} else {
p_vec[i] <- data %>%
filter(z > Ersplits[1] &
x < Ersplits[i] &
x > Ersplits[i + 1]) %>%
.$y %>%
mean()
}
} else {
for (i in 1:len_sp) {
if (len_sp == 1) {
p_vec[i] <- data %>%
filter(z < Elsplits[1]) %>%
.$y %>%
mean()
} else if (i == len_sp) {
p_vec[i] <- data %>%
filter(z < Elsplits[1] &
x < Elsplits[i]) %>%
.$y %>%
mean()
} else if (i == 1) {
p_vec[i] <- data %>%
filter(z < Elsplits[1] &
x > Elsplits[i + 1]) %>%
.$y %>%
mean()
} else {
p_vec[i] <- data %>%
filter(z < Elsplits[1] &
x < Elsplits[i] &
x > Elsplits[i + 1]) %>%
.$y %>%
mean()
}
return(p_vec)
}
# retrieve parameter values
Elparams <- get_leafparams(length(Elsplits), 'left')
Erparams <- get_leafparams(length(Ersplits), 'right')
# splits may be too close together and produce no obs
if (any(is.na(Elparams))) {
naidx <- which(is.na(Elparams))
Elparams <- Elparams[-naidx]
Elsplits <- Elsplits[-(naidx + 1)]
} else if (any(is.na(Erparams))) {
naidx <- which(is.na(Erparams))
Erparams <- Erparams[-naidx]
Ersplits <- Ersplits[-(naidx + 1)]
}
# set values for plotting fits
data$yfit <- 0
llparams <- length(Elparams)
lrparams <- length(Erparams)
if (llparams == 1) {
idx <- which(data$z < Elsplits[1])
data$yfit[idx] <- Elparams[1]
}
if (llparams == 2) {
idx1 <- which(data$z < Elsplits[1] &
data$x >= Elsplits[2])
data$yfit[idx1] <- Elparams[1]
idx2 <- which(data$z < Elsplits[1] &
data$x < Elsplits[2])
data$yfit[idx2] <- Elparams[2]
}
for (i in 1:llparams) {
if (i == 1) {
idx <- which(data$z < Elsplits[1] &
data$x >= Elsplits[2])
data$yfit[idx] <- Elparams[1]
} else {
idx <- which(data$z < Elsplits[1] &
data$x < Elsplits[i] &
data$x >= Elsplits[i + 1])
data$yfit[idx] <- Elparams[i]
}
if (i == llparams) {
idx <- which(data$z < Elsplits[1] &
data$x < Elsplits[i])
data$yfit[idx] <- Elparams[i]
}
if (lrparams == 1) {
idx <- which(data$z > Ersplits[1])
data$yfit[idx] <- Erparams[1]
}
if (lrparams == 2) {
idx1 <- which(data$z > Ersplits[1] &
data$x >= Ersplits[2])
data$yfit[idx1] <- Erparams[1]
idx2 <- which(data$z > Ersplits[1] &
data$x < Ersplits[2])
data$yfit[idx2] <- Erparams[2]
}
for (i in 1:lrparams) {
if (i == 1) {
idx <- which(data$z > Ersplits[1] &
data$x >= Ersplits[2])
data$yfit[idx] <- Erparams[1]
} else {
idx <- which(data$z > Ersplits[1] &
data$x < Ersplits[i] &
data$x >= Ersplits[i + 1])
data$yfit[idx] <- Erparams[i]
}
if (i == lrparams) {
idx <- which(data$z > Ersplits[1] &
data$x < Ersplits[i])
data$yfit[idx] <- Erparams[i]
}
# plot results
plot(data$x, data$y, xlab = 'x', ylab = 'y')
points(data[data$z < 0.5, 'x'], data[data$z < 0.5, 'yfit'],
col = 'red', pch = 19, cex = 1)
points(data[data$z > 0.5, 'x'], data[data$z > 0.5, 'yfit'],
col = 'blue', pch = 19, cex = 1)
title(main = 'Generated Treatment Data and EM Extension Prediction')
legend("topleft", pch = 19, col = c('blue', 'red'), box.lty = 0,
legend = c('Yhat | Z = 1', 'Yhat | Z = 0'))
# plot results
EM_ext_plot <- function() {
plot(data$x, data$y, xlab = 'x', ylab = 'y')
points(data[data$z < 0.5, 'x'], data[data$z < 0.5, 'yfit'],
col = 'red', pch = 19, cex = 1)
points(data[data$z > 0.5, 'x'], data[data$z > 0.5, 'yfit'],
col = 'blue', pch = 19, cex = 1)
title(main = 'Generated Treatment Data and EM Extension Prediction')
legend("topleft", pch = 19, col = c('blue', 'red'), box.lty = 0,
legend = c('Yhat | Z = 1', 'Yhat | Z = 0'))
}
EM_ext_plot()
cc <- c(1,2,3)
cc + cc
cc + c(2,2,2)
cc
c(1, 2, 3, 2*matrix(1, nrow = 1, ncol = 3))
t <- matrix(c(1,1,1,2,2,2,3,3,3), nrow = 3, ncol = 3)
t
t <- matrix(c(1,1,1,2,2,2,3,3,3), nrow = 3, ncol = 3, byrow = T)
t
c(t)
t
t(t)
c(t(t))
cc <- c(1, 2, 3)
tt <- matrix(c(cc[1]^2*cc^2,cc[2]^2*cc^2,cc[3]^2*cc^2))
tt
tt <- matrix(c(cc[1]^2*cc^2,cc[2]^2*cc^2,cc[3]^2*cc^2),nrow=3,ncol=3)
tt
sqrt(tt)
tt <- sqrt(tt)
tt
c(tt)
cc <- c(1,2,3)
2*cc
2*cc*2 - 3*cc
4*cc
3*cc
tt
2*tt
4*tt-2*tt
c(4*tt-2*tt)
tt
tt[1, 2:3]
tt
tt[2,1]^2*tt[2,2:3]^2
4*16
4*64
4*36
sqrt(tt[2,1]^2*tt[2,2:3]^2)
t <- t(matrix(c(1,2,3)))
t
t[2:3]
t[1, 2:3]
tt
tt[2:3]
tt[4:5]
tt
c(c(1,2,3))
c(c(1,2,3), tt)
tt
tt[1, ]
tt[2, ]
tt
tt[2]
tt[9]
tt[2:]
tt[2:length(tt)]
length(tt)
3^2*2^2 == (3*2)^2
d <- c(1,2,3)
d
diag(d)
od <- c(6,7,8)
upper.tri(dd, diag = d)
upper.tri(od, diag = d)
d
dd <- diag(d)
dd
dd[upper.tri()] <- od
dd[upper.tri(dd)] <- od
dd
dd[lower.tri(dd)] <- dd[upper.tri(dd)]
dd
dd <- diag(1:8)
dd
1/2*8^2 - 8
(8*8-1)*8/2
(8^2-8)/2
dd <- diag(1:5)
length(dd)
(length(dd)^2-length(dd))/2
(5^2-5)/2
dd
dd <- diag(1:10)
dd
(10^2-10)/2
17+28
dd[upper.tri(dd)] <- c(101:145)
dd
dd[lower.tri(dd)] <- c(101:145)
dd
dd <- diag(1:10)
dd
dd[upper.tri(dd)] <- c(101:145)
dd
t(dd)
dd[upper.tri(dd)] <- dd[lower.tri(dd)]
dd
dd[upper.tri(dd)] <- c(101:145)
dd
dd <- t(dd)
dd
dd[upper.tri(dd)] <- dd[lower.tri(dd)]
dd
dd[upper.tri(dd)] <- c(101:145)
dd
dd <- diag(1:10)
dd
dd[upper.tri(dd)] <- c(101:145)
dd
dd[upper.tri(dd)] <- t(dd)[upper.tri(dd)]
dd
dd[upper.tri(dd)] <- c(101:145)
t(dd)
dd
dd[lower.tri(dd)] <- t(dd)[upper.tri(dd)]
dd
dd[lower.tri(dd)] <- dd[upper.tri(dd)]
dd
dd <- diag(1:10)
dd
dd[lower.tri(dd)] <- c(101:145)
dd
dd <- diag(1:10)
dd
dd[upper.tri(dd)] <- c(101:145)
dd
t(dd)
dd
dd[lower.tri(dd)] <- t(dd)[upper.tri(t(dd))]
dd
dd[lower.tri(dd)] <- t(dd)[lower.tri(dd)]
dd
install.packages('IRkernel')
IRkernel::installspec()
library(IRkernel)
remove.packages("IRkernel", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
remove.packages("IRdisplay", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
q()
shiny::runApp('research/agri/AD/shiny_app/nwr_app')
library(shiny)
ui <- fluidPage('Hello World')
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
testfun <- function(...){
sum(...)
}
testfun(1, 2, 3)
sum(x)
testfun <- function(...){
x <- ...
sum(x)
}
testfun(1, 2, 3)
testfun <- function(...){
x <- c(...)
sum(x)
}
testfun(1, 2, 3)
return(list(f, z))
testfun <- function(..., v1, v2){
x <- c(...)
f <- sum(x)*v1
z <- sum(x)*v2
return(list(f, z))
}
testfun(1, 2, 3, v1 = 2, v2 = 3)
install.packages("reticulate")
library(reticulate)
nwr_fun <- source_python('~/research/agri/AD_NWR/NWR_app/nwr_app/nwr_model.py')
n
nwr_fun$phos_fun(10, 15, 20, 25, 30, 35, loc='west', soil_test=51, acres=4)
import('~/research/agri/AD_NWR/NWR_app/nwr_app/nwr_model.py')
nwr_fun <- source_python
remove(list = objects())
library(reticulate)
source_python('~/research/agri/AD_NWR/NWR_app/nwr_app/nwr_model.py')
f <- phos_func(10, 15, 20, 25, 30, 35, loc='west', soil_test=51, acres=4)
f
f[[1]]
# NWR app #
# Function takes feedstock and manure volume arguments and computes phosphorus nutrient outflow
# in kg/time step.
#
# 3.79 constant converts gallon to liter (1L = 1kg)
# 0.9112 nutrient portion remaining post liquid-solid separation after AD output to lagoon
# 2.205 constant converts kilogram to pound
# 0.00378541 constant converts mg/ml to kg/gal
# 1000 constant converts kg to cubic meter
# kWh 1.02264 correction factor, 39.2 calorific value, 3.6 conversion factor
# Sources python script from previous application
# ---------------------------------------------------------------------------------------------
remove(list = objects())
library(reticulate)
source_python('~/research/agri/AD_NWR/NWR_app/nwr_app/nwr_model.py')
nwr_func <- phos_func()
# NWR app #
# Function takes feedstock and manure volume arguments and computes phosphorus nutrient outflow
# in kg/time step.
#
# 3.79 constant converts gallon to liter (1L = 1kg)
# 0.9112 nutrient portion remaining post liquid-solid separation after AD output to lagoon
# 2.205 constant converts kilogram to pound
# 0.00378541 constant converts mg/ml to kg/gal
# 1000 constant converts kg to cubic meter
# kWh 1.02264 correction factor, 39.2 calorific value, 3.6 conversion factor
# Sources python script from previous application
# ---------------------------------------------------------------------------------------------
remove(list = objects())
library(reticulate)
source_python('~/research/agri/AD_NWR/NWR_app/nwr_app/nwr_model.py')
nwr_func <- phos_func
nwr_func(10, 15, 20, 25, 30, 35, loc='west', soil_test=51, acres=4)
remove(list = objects())
library(shiny)
ui <- fluidPage('Hello World')
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
?sliderInput
library(shiny)
ui <- fluidPage('Hello World')
server <- function(input, output) {
sliderInput(inputId = 'slider', label = 'Pick a number',
min = 1, max = 30, value = 15)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(sliderInput(inputId = 'slider', label = 'Pick a number',
min = 1, max = 30, value = 15))
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num', label = 'Pick a number',
min = 1, max = 30, value = 15),
plotOutput(outputId = 'hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
title = 'RV N(0,1)'
hist(rnorm(100), main = title)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num', label = 'Pick a number',
min = 1, max = 30, value = 15),
plotOutput(outputId = 'hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
title = 'RV N(0,1)'
hist(rnorm(input$num), main = title)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num', label = 'Pick a number',
min = 1, max = 3000, value = 1500),
plotOutput(outputId = 'hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
title = 'RV N(0,1)'
hist(rnorm(input$num), main = title)
})
}
shinyApp(ui = ui, server = server)
remove(list = objects())
library(shiny)
library(reticulate)
source_python('nwr_model.py')
setwd('~/research/agri/AD/shiny_app')
library(shiny)
library(reticulate)
source_python('nwr_model.py')
library(shiny)
ui <- fluidPage(
'test app'
)
server <- function(input, output){
}
shinyApp(ui, server)
runApp()
# NWR app #
# Function takes feedstock and manure volume arguments and computes phosphorus nutrient outflow
# in kg/time step.
#
# 3.79 constant converts gallon to liter (1L = 1kg)
# 0.9112 nutrient portion remaining post liquid-solid separation after AD output to lagoon
# 2.205 constant converts kilogram to pound
# 0.00378541 constant converts mg/ml to kg/gal
# 1000 constant converts kg to cubic meter
# kWh 1.02264 correction factor, 39.2 calorific value, 3.6 conversion factor
# Sources python script from previous application
# Function arguments (blood, fish_by, paper_pulp, OB, GT, manure, loc, soil_test, acres)
# ---------------------------------------------------------------------------------------------
remove(list = objects())
library(reticulate)
source_python('~/research/agri/AD_NWR/NWR_app/nwr_app/nwr_model.py')
nwr_func <- phos_func
nwr_func(10, 10, 10, 10, 10, 10, loc = 'west', soil_test = 41, acres = 3)
runApp()
install.packages('rsconnect')
remove(list = objects())
install.packages('rsconnect')
